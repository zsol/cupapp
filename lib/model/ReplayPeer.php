<?php


/**
 * Skeleton subclass for performing query and update operations on the 'replay' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/10/10 22:15:42
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ReplayPeer extends BaseReplayPeer {
    static public function getFormattedGameLength($length) {
        $i18n = sfContext::getInstance()->getI18N();
        $minutes = floor($length / 60);
        $seconds = $length - 60*$minutes;

        return $i18n->__('%%minutes%%:%%seconds%%',array('%%minutes%%' => $minutes, '%%seconds%%' => $seconds));
    }

    static public function getLastReplays( $limit = 5 ) {
        $c = new Criteria();
        $c->addDescendingOrderByColumn(ReplayPeer::CREATED_AT);
        $c->setLimit($limit);

        return ReplayPeer::doSelect($c);
    }

    static public function getMyLastReplays( $limit = 5 ) {
        $c = new Criteria();
        $c->addDescendingOrderByColumn(ReplayPeer::CREATED_AT);
        $c->setLimit($limit);

        $sf_user = sfContext::getInstance()->getUser();
        if ($sf_user->isAuthenticated()) {
            $c->add(ReplayPeer::USER_ID, $sf_user->getId());
        }
        return ReplayPeer::doSelect($c);
    }

    static public function getPagerByParameters($parameters = array(), $maxPerPage = 10, $page = 1) {
        $pager = new sfPropelPager('Replay', $maxPerPage);
        $pager->setPage($page);
        $c = new Criteria();

        if (!empty($parameters['search_player'])) {
            $c->add(ReplayPeer::PLAYERS, '%'.$parameters['search_player'].'%', Criteria::LIKE);
        }
        if (!empty($parameters['search_map'])) {
            $c->add(ReplayPeer::MAP_NAME, '%'.$parameters['search_map'].'%', Criteria::LIKE);
        }
        if (!empty($parameters['category_id'])) {
            $c->add(ReplayPeer::CATEGORY_ID, $parameters['category_id']);
        }
        if (!empty($parameters['game_type_id'])) {
            $c->add(ReplayPeer::GAME_TYPE_ID, $parameters['game_type_id']);
        }
        if (!empty($parameters['order_options'])) {
            switch ($parameters['order_options']) {
                case 'upload_date':
                    $c->addDescendingOrderByColumn(ReplayPeer::CREATED_AT);
                    break;
                case 'avg_apm':
                    $c->addDescendingOrderByColumn(ReplayPeer::AVG_APM);
                    break;
            }
        }

        $pager->setCriteria($c);
        $pager->init();
        
        return $pager;
    }
} // ReplayPeer
