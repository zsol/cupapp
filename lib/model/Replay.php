<?php


/**
 * Skeleton subclass for representing a row from the 'replay' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/10/10 22:15:42
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Replay extends BaseReplay {

    const RESULT_WINNER  = 1;
    const RESULT_LOSER   = 2;
    const RESULT_UNKNOWN = 3;

    protected $gameInfoArray = null;

    public function isAmendable() {
      $timelimit = sfConfig::get('app_replay_amendable_limit_seconds', 120);
      $now = time();
      $ctime = strtotime($this->getCreatedAt('Y-m-d H:i:s'));
      return (($now - $ctime) < $timelimit);
    }

    public function isAmendableBy($userId) {
      return $userId == $this->getUserId() && $this->isAmendable();
    }

    public function getGameInfo() {
        if ($this->gameInfoArray == null) {
            $this->gameInfoArray = json_decode(parent::getGameInfo(), true);
        }
        return $this->gameInfoArray;
    }

    public function getPlayersInfo() {
        $gameInfo = $this->getGameInfo();
        return $gameInfo['players'];
    }

    public function getMessageLog() {
        $gameInfo = $this->getGameInfo();
        return $gameInfo['message_log'];
    }

    public function getEventLog() {
        $gameInfo = $this->getGameInfo();
        return $gameInfo['event_log'];
    }

    public function getGlobalInfo() {
        $gameInfo = $this->getGameInfo();
        return $gameInfo['global_info'];
    }

    public function isWinnerKnown() {
        $globalInfo = $this->getGlobalInfo();
        return $globalInfo['winner_known'];
    }

    public function getGameLength() {
        $gameInfo = $this->getGameInfo();
        return $gameInfo['global_info']['game_length'];
    }

    public function getGameSpeed() {
        $gameInfo = $this->getGameInfo();
        return $gameInfo['global_info']['game_speed'];
    }

    public function getPlayersName( $separator = ' - ') {
        $teams = $this->getPlayersInfo();
        $names = array();
        foreach($teams as $team) {
            foreach($team as $player) {
                $names[] = $player['name'];
            }
        }
        return implode($names, $separator);
    }

    public function getCreatedAt( $format = null) {
        if (!$format) {
            $format = sfConfig::get('app_date_format');
        }
        return parent::getCreatedAt($format);
    }

    public function getMapName( $separator = null ) {
        $mapName = parent::getMapName();
        if ($separator) {
            $mapName = str_replace(' ', $separator, $mapName);
        }
        return $mapName;
    }

    public function __toString() {
        $gameType = $this->getReplayGameType()->getName();
        $mapName = $this->getMapName('_');
        $players = $this->getPlayersName('-');

        return $gameType.'-'.$mapName.'-'.$players;
    }

    public function delete(PropelPDO $con = null) {
        unlink($this->getFilePath());
        parent::delete();
    }

    public function getFilePath() {
        $userId = $this->getUserId();
        return sfConfig::get('sf_upload_dir').'/replay/'.$userId.'/'.$this->getFileName();
    }
    
    /**
     * Creates the directory structure and gives back the filename string
     *
     * @return string
     */
    public function generatePreparedFileName() {
        $userId = $this->getUserId();
        $gameTypeId = $this->getGameTypeId();

        $dir = sfConfig::get('sf_upload_dir').'/replay/'.$userId.'/';

        if (!file_exists($dir)) {
            $rs = @mkdir($dir,0755,true);
            if (!$rs) {
                throw new Exception('Cannot create directory: '.$dir);
            }
        }

        return strtotime($this->getCreatedAt('Y-m-d H:i:s')).'.SC2Replay';
    }

    public function getDownloadLink(){
        $userId = $this->getUserId();
        return '/uploads/replay/'.$userId.'/'.$this->getFilename();
    }

    public function getRegion() {
      $gameinfo = $this->getGameInfo();
      return isset($gameinfo['global_info']['region']) ? $gameinfo['global_info']['region'] : "";
    }

    public function getPlayDate() {
      $gameinfo = $this->getGameInfo();
      return $gameinfo['global_info']['play_date'];
    }

    public function report() {
      $this->setReportedCount($this->getReportedCount() + 1);
      $this->save();
    }

    /**
     * Parses replay data and sets values of this object
     *
     * @return bool
     */
    public function parseData() {
        /*
         * Parse replay file
         */
        $fileUrl = $this->getFilePath();
        $mpq = new MPQFile($fileUrl,true,0);
        $repData = $mpq->parseReplay();

        if (!$repData) {
            return false;
        }
        /*
         * Get players
         */
        $players = $repData->getPlayers();
        if (count($players) == 0) {
            return false;
        }

        $game_avg_apm = 0;
	$num_non_observers = 0;

        /*
         * Generate common information
         */
        $globalInfo = array();
        $globalInfo['map_name'] = $repData->getMapName();
        $globalInfo['game_length'] = $repData->getGameLength();
        $globalInfo['game_speed'] = $repData->getGameSpeedText();
        $globalInfo['team_size'] = $repData->getTeamSize();
        $globalInfo['winner_known'] = $repData->isWinnerKnown();
	$globalInfo['region'] = $repData->getRealm();
	$globalInfo['play_date'] = $repData->getCtime();

        $this->setMapName($repData->getMapName());
        $this->setGameTypeId(ReplayGameTypePeer::getGameTypeIdByName($repData->getTeamSize()));

        $parties = array();
        $observers = array();

        /*
         * Retrieve player information
         */
        foreach ($players as $player) {
          $playerData = array();
          $playerData['name'] = $player['name'];

          if ($player['isObs']) {
              $observers[] = $playerData;
              continue;
          }
	  
	  $num_non_observers += 1;

          $playerData['race'] = $player['race'];
          $playerData['color'] = $player['color'];
          $playerData['sColor'] = $player['sColor'];
          $playerData['uid'] = $player['uid'];
          $playerData['uidIndex'] = $player['uidIndex'];
          $playerData['avg_apm'] = round($player['apmtotal'] / ($repData->getGameLength() / 60));

          if (isset($player['won']) && $player['won'] == 1) {
              $playerData['winner'] = true;
          }
          else {
              if ($repData->isWinnerKnown()) {
                  $playerData['winner'] = false;
              }
          }

          $parties[$player['team']][] = $playerData;

          $game_avg_apm += $playerData['avg_apm'];
        }

        $this->setAvgApm(round($game_avg_apm / $num_non_observers));

        /*
         * Retrieve message log
         */
        $messages = $repData->getMessages();
        $messagesData = array();
        foreach($messages as $message) {
            $messageData = array();
            $messageData['time'] = $message['time'];
            $messageData['name'] = $message['name'];
            $messageData['target'] = ($message['target'] == 2)?"alliance":"all";
            $messageData['message'] = $message['message'];
            $messagesData[] = $messageData;
        }

        /*
         * Retrieve events log
         */
        //$event_log = $repData->getEvents();

        $gameInfo = array();
        $gameInfo['message_log'] = $messagesData;
        $gameInfo['global_info'] = $globalInfo;
        $gameInfo['players'] = $parties;
        $gameInfo['observers'] = $observers;
        //$gameInfo['event_log'] = $event_log;

        $this->setGameInfo(json_encode($gameInfo));
        $this->setPlayers($this->getPlayersName(', '));
        
        return true;
    }
} // Replay
